{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "The responses of the open api in swagger focus on the data field rather than the code and the message fields",
        "title": "Rainbow-API",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "api.nftrainbow.cn",
    "paths": {
        "/dashboard/apps/{id}/nft/batch/by-meta-parts": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Batch Mint a NFT by providing a file url to create the metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mints"
                ],
                "summary": "Batch Mint NFT with metadata parts",
                "operationId": "AppBatchMintNFT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "mint_meta",
                        "name": "app_batch_mint_meta_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/services.AppMintByMetaPartsDto"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.MintTask"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/dashboard/apps/{id}/nft/batch/by-meta-uri": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Batch Mint a NFT by providing tokenIds and metadata urls to create the metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mints"
                ],
                "summary": "Batch Mint NFT with metadata uri",
                "operationId": "AppBatchMintByMetaUri",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "batch_mint_request",
                        "name": "batch_mint_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.AppBatchMintByMetaUriDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/dashboard/login": {
            "post": {
                "description": "User login to get the JWT according to the email and password",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "User login",
                "operationId": "UserLogin",
                "parameters": [
                    {
                        "description": "login info, contain app_id and app_secret",
                        "name": "userLoginInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/middlewares.UserLoginInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "auth token",
                        "schema": {
                            "$ref": "#/definitions/middlewares.LoginResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/dashboard/refresh_token": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Obtain a new JWT",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Refresh JWT",
                "operationId": "RefreshUserAuth",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer openapi_token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "refreshed auth token",
                        "schema": {
                            "$ref": "#/definitions/middlewares.LoginResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/accounts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Query web3 account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Query web3 account",
                "operationId": "QueryAccount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "phone",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AccountDisplayPart"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Insert web3 account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Insert web3 account",
                "operationId": "InsertAccount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "insert_account_req",
                        "name": "insert_account_req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.InsertAccountReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AccountDisplayPart"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/burns": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the NFT burned list information.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Burns"
                ],
                "summary": "Obtain the burned NFTs list",
                "operationId": "GetBurnList",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BurnTaskQueryResult"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Burn NFT by admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Burns"
                ],
                "summary": "Burn NFT",
                "operationId": "BurnNft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "burn_dto",
                        "name": "burn_dto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.BurnDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BurnTask"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/burns/customizable/batch": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Batch burn NFT by admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Burns"
                ],
                "summary": "Batch burn NFT",
                "operationId": "BurnBatch",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "burn_batch_dto",
                        "name": "burn_batch_dto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.BurnBatchDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BurnTask"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/burns/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get NFT Burn detail info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Burns"
                ],
                "summary": "Burn NFT detail",
                "operationId": "GetBurnDetail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BurnTask"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/contracts/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the contract list containing the contracts deployed through the specified app.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Obtain contract list",
                "operationId": "ListContracts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ContractTaskQueryResult"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deploy a ERC721 or ERC1155 contract.\nDeploy a ERC721 or ERC1155 contract.",
                "produces": [
                    "application/json",
                    "application/json"
                ],
                "tags": [
                    "Contract",
                    "Contract"
                ],
                "summary": "Deploy contract",
                "operationId": "DeployContract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "contract_info",
                        "name": "contract_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.ContractDeployDto"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "contract_info",
                        "name": "contract_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.ContractDeployDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Contract"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/contracts/detail/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get Contract info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Contract detail",
                "operationId": "GetContractInfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Contract"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/contracts/{address}/admin": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get Contract Admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Get administrator of contract, only work on conflux chain",
                "operationId": "GetContractAdmin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin address",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "599": {
                        "description": "Businesss error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update administrator of contract, only work on conflux chain",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Update administrator of contract",
                "operationId": "UpdateContractAdmin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "contract admin update info",
                        "name": "admin_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.ContractAdminUpdateDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction id",
                        "schema": {
                            "$ref": "#/definitions/services.SendTxResp"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "599": {
                        "description": "Businesss error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/contracts/{address}/profile": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get contract runtime profile, contains contract info and currently minted/minting max token id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Get contract runtime profile",
                "operationId": "GetContractProfile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the returned max token id will ignore the token ids",
                        "name": "ignore_token_ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ContractRuntimeProfile"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/contracts/{address}/sponsor": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the sponsor of the specified contract according to address.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Query sponsor",
                "operationId": "GetContractSponsorInfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "chain",
                        "name": "chain",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.SponsorInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid address",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Set the sponsor for a contract according to the address with specified value(gas-1, storage-50)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Set sponsor",
                "operationId": "SetContractSponsor",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "chain",
                        "name": "chain",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Open auto sponsor or not, for mainnet contract keep user account have enough balance",
                        "name": "auto_sponsor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction id\"\t\"success",
                        "schema": {
                            "$ref": "#/definitions/services.SetSponsorResp"
                        }
                    },
                    "400": {
                        "description": "Invalid address",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/contracts/{address}/sponsor/whitelist": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get contract sponsored whitelist, only work on conflux chain",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Get contract sponsored whitelist",
                "operationId": "GetContractSponsoredWhitelist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contract sponsored whitelist",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "599": {
                        "description": "Businesss error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add contract sponsored whitelist, only work on conflux chain",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Add contract sponsored whitelist",
                "operationId": "AddContractSponsorWhitelist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Adding sponsor whitelist",
                        "name": "users",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction id",
                        "schema": {
                            "$ref": "#/definitions/services.SendTxResp"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "599": {
                        "description": "Businesss error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Remove contract sponsored whitelist, only work on conflux chain",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Remove contract sponsored whitelist",
                "operationId": "RemoveContractSponsorWhitelist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Removing sponsor whitelist",
                        "name": "users",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction id",
                        "schema": {
                            "$ref": "#/definitions/services.SendTxResp"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "599": {
                        "description": "Businesss error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/files/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the file list containing the info of the files uploaded in the specified app",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Obtain file list",
                "operationId": "ListFiles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer openapi_token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.FilesQueryResult"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Upload a file which can be a video, an image and so on",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Upload file",
                "operationId": "UploadFile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer openapi_token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "uploaded file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.UploadFilesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/files/folder": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Upload a folder containing the files which can be a video, an image and so on",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Upload folder",
                "operationId": "UploadFolder",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer openapi_token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "uploaded folder",
                        "name": "folder",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.UploadFolderResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/files/folder/oss": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Upload a folder containing the files which can be a video, an image and so on, to oss",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Upload folder to oss",
                "operationId": "UploadFolderToOSS",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer openapi_token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "uploaded folder",
                        "name": "folder",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.UploadFolderResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/files/oss": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Upload a file to OSS, which can be a video, an image and so on",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Upload file to OSS",
                "operationId": "UploadFileToOss",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer openapi_token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "uploaded file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.UploadFilesResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/login": {
            "post": {
                "description": "Login the app to get the JWT according to the app_id and app_secret",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "App login",
                "operationId": "LoginApp",
                "parameters": [
                    {
                        "description": "login info, contain app_id and app_secret",
                        "name": "appLoginInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/middlewares.AppLoginInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "auth token",
                        "schema": {
                            "$ref": "#/definitions/middlewares.LoginResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/metadata/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the metadata list containing the info of the metadata created in the specified app",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Obtain metadata list",
                "operationId": "ListMetadatas",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer openapi_token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ExposedMetadataQueryResult"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create NFT metadata by providing the info including name, description and so on",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Create NFT metadata",
                "operationId": "CreateMetadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer openapi_token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "metadata_info",
                        "name": "metadata_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.MetadataDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ExposedMetadata"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/metadata/{metadata_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Query the metadata according to metadata_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Query metadata",
                "operationId": "GetMetadatInfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer openapi_token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "metadata_id",
                        "name": "metadata_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ExposedMetadata"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/mints/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the NFT list containing the NFTs minted in the specified app\nGet the NFT list containing the NFTs minted in the specified app",
                "produces": [
                    "application/json",
                    "application/json"
                ],
                "tags": [
                    "Mints",
                    "Mints"
                ],
                "summary": "Obtain NFT list",
                "operationId": "ListMints",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "contract",
                        "name": "contract",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "mint_to",
                        "name": "mint_to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "chain",
                        "name": "chain",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "contract",
                        "name": "contract",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "mint_to",
                        "name": "mint_to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "chain",
                        "name": "chain",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MintTaskQueryResult"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Mint a NFT by providing a metadata url",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mints"
                ],
                "summary": "Mint NFT",
                "operationId": "CustomMint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "custom_mint_dto",
                        "name": "custom_mint_dto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CustomMintDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MintTask"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/mints/customizable/batch": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Mint several NFTs once",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mints"
                ],
                "summary": "Batch Mint NFTs",
                "operationId": "BatchCustomMint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "custom_mint_batch_dto",
                        "name": "custom_mint_batch_dto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.CustomMintBatchDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.MintTask"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/mints/easy/files": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Mint a NFT by uploading a file which can be a video, image and so on",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mints"
                ],
                "summary": "Mint NFT with file",
                "operationId": "EasyMintByFile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "chain",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "mint_to_address",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MintTask"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/mints/easy/urls": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Mint a NFT by providing a file url to create the metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mints"
                ],
                "summary": "Mint NFT with metadata",
                "operationId": "EasyMintByMetadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "easy_mint_meta_info",
                        "name": "easy_mint_meta_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.EasyMintMetaPartsDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MintTask"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/mints/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get NFT detail info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mints"
                ],
                "summary": "Mint NFT detail",
                "operationId": "GetMintDetail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MintTask"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/mints/{id}/reMint": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Reset mint task status to init so that it can be minted again",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mints"
                ],
                "summary": "Reset mint task status to init so that it can be minted again",
                "operationId": "ReMintNFT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MintTask"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/nft/count/{address}/{token_id}/{holder}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get NFT hold count by address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFTs"
                ],
                "summary": "Get NFT hold count by address",
                "operationId": "NFTHoldCount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "contract address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "token_id",
                        "name": "token_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "holder address",
                        "name": "holder",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "contract type erc721, erc1155, default is erc721",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "epoch height, default is latest_state",
                        "name": "epoch_height",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/nft/{address}/{token_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get NFT info, mainly owner and metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFTs"
                ],
                "summary": "Get NFT info, mainly owner and metadata",
                "operationId": "NftInfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "token_id",
                        "name": "token_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.NFT"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/nft/{address}/{token_id}/tokenUri": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update NFT token uri",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFTs"
                ],
                "summary": "Update NFT token uri",
                "operationId": "UpdateNftTokenUri",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "token_id",
                        "name": "token_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "req",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routers.UpdateTokenUriReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/refresh_token": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Obtain a new JWT",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Refresh JWT",
                "operationId": "RefreshAppAuth",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer openapi_token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "refreshed auth token",
                        "schema": {
                            "$ref": "#/definitions/middlewares.LoginResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/transfers/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the NFT list containing the transferred NFT information.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfers"
                ],
                "summary": "Obtain the transferred NFTs list",
                "operationId": "ListTransfer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TransferTaskQueryResult"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/transfers/customizable": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Transfer NFT by admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfers"
                ],
                "summary": "Transfer NFT",
                "operationId": "TransferNft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "transfer_dto",
                        "name": "transfer_dto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.TransferDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TransferTask"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/transfers/customizable/batch": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Transfer several NFTs once",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfers"
                ],
                "summary": "Batch Transfer NFTs",
                "operationId": "BatchTransferNft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "transfer_batch_dto",
                        "name": "transfer_batch_dto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.TransferBatchDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TransferTask"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/transfers/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get NFT Transfer detail info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfers"
                ],
                "summary": "Transfer NFT detail",
                "operationId": "GetTransferDetail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TransferTask"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        },
        "/v1/tx/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get transaction informantion by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Get transaction informantion by ID",
                "operationId": "GetTransactionByID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Open_JWT",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction informantion",
                        "schema": {
                            "$ref": "#/definitions/services.TxResp"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    },
                    "599": {
                        "description": "Businesss error",
                        "schema": {
                            "$ref": "#/definitions/rainbow_errors.RainbowErrorDetailInfo"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "enums.TransactionBlockReason": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "x-enum-varnames": [
                "TX_BLOCK_REASON_DB_ERR",
                "TX_BLOCK_REASON_SPONSORING",
                "TX_BLOCK_REASON_IO_ERR",
                "TX_BLOCK_REASON_NOT_ENOUGH_CASH",
                "TX_BLOCK_REASON_FAILED_GET_SPONSOR_INFO",
                "TX_BLOCK_REASON_SPONSOR_NOT_ENOUGH"
            ]
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "middlewares.AppLoginInfo": {
            "type": "object",
            "required": [
                "app_id",
                "app_secret"
            ],
            "properties": {
                "app_id": {
                    "type": "string"
                },
                "app_secret": {
                    "type": "string"
                }
            }
        },
        "middlewares.LoginResp": {
            "type": "object",
            "properties": {
                "expire": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "middlewares.UserLoginInfo": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.AccountDisplayPart": {
            "type": "object",
            "properties": {
                "conflux_mainnet_address": {
                    "type": "string"
                },
                "conflux_testnet_address": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "models.BurnTask": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "app_id": {
                    "type": "integer"
                },
                "block_reason": {
                    "description": "没有发送到tx engine的原因，比如余额不足或网络错误等",
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.TransactionBlockReason"
                        }
                    ]
                },
                "chain_id": {
                    "type": "integer"
                },
                "chain_type": {
                    "type": "integer"
                },
                "contract": {
                    "type": "string"
                },
                "contract_type": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "error": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "status": {
                    "description": "0-pending, 1-success, 2-failed",
                    "type": "integer"
                },
                "token_id": {
                    "type": "string"
                },
                "tx_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "models.BurnTaskQueryResult": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BurnTask"
                    }
                }
            }
        },
        "models.Contract": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "app_id": {
                    "type": "integer"
                },
                "auto_sponsor": {
                    "type": "boolean"
                },
                "base_uri": {
                    "type": "string"
                },
                "block_reason": {
                    "description": "没有发送到tx engine的原因，比如余额不足或网络错误等",
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.TransactionBlockReason"
                        }
                    ]
                },
                "chain_id": {
                    "type": "integer"
                },
                "chain_type": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "error": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owner_address": {
                    "type": "string"
                },
                "royalties_address": {
                    "type": "string"
                },
                "royalties_bps": {
                    "type": "integer"
                },
                "status": {
                    "description": "0-pending, 1-success, 2-failed",
                    "type": "integer"
                },
                "symbol": {
                    "type": "string"
                },
                "tokens_transferable_by_admin": {
                    "type": "boolean"
                },
                "tokens_transferable_by_user": {
                    "type": "boolean"
                },
                "transfer_cooldown_time": {
                    "type": "integer"
                },
                "tx_id": {
                    "type": "integer"
                },
                "type": {
                    "description": "1-ERC721, 2-ERC1155",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.ContractRuntimeProfile": {
            "type": "object",
            "properties": {
                "contract": {
                    "$ref": "#/definitions/models.Contract"
                },
                "max_token_id": {
                    "type": "integer"
                }
            }
        },
        "models.ContractTaskQueryResult": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Contract"
                    }
                }
            }
        },
        "models.ExposedFile": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "file_name": {
                    "type": "string"
                },
                "file_size": {
                    "type": "integer"
                },
                "file_type": {
                    "type": "string"
                },
                "file_url": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.ExposedMetadata": {
            "type": "object",
            "required": [
                "description",
                "image",
                "name"
            ],
            "properties": {
                "animation_url": {
                    "type": "string"
                },
                "app_id": {
                    "type": "integer"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExposedMetadataAttribute"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "external_link": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "metadata_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "models.ExposedMetadataAttribute": {
            "type": "object",
            "properties": {
                "attribute_name": {
                    "type": "string"
                },
                "display_type": {
                    "type": "string"
                },
                "trait_type": {
                    "type": "string"
                },
                "value": {
                    "description": "TODO support number",
                    "type": "string"
                }
            }
        },
        "models.ExposedMetadataQueryResult": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExposedMetadata"
                    }
                }
            }
        },
        "models.FilesQueryResult": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExposedFile"
                    }
                }
            }
        },
        "models.MintTask": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "app_id": {
                    "type": "integer"
                },
                "block_reason": {
                    "description": "没有发送到tx engine的原因，比如余额不足或网络错误等",
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.TransactionBlockReason"
                        }
                    ]
                },
                "chain_id": {
                    "type": "integer"
                },
                "chain_type": {
                    "type": "integer"
                },
                "contract": {
                    "type": "string"
                },
                "contract_type": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "error": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "mint_to": {
                    "type": "string"
                },
                "mint_type": {
                    "type": "integer"
                },
                "status": {
                    "description": "0-pending, 1-success, 2-failed",
                    "type": "integer"
                },
                "token_id": {
                    "type": "string"
                },
                "token_uri": {
                    "type": "string"
                },
                "tx_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.MintTaskQueryResult": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MintTask"
                    }
                }
            }
        },
        "models.TaskType": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11
            ],
            "x-enum-varnames": [
                "TASK_TYPE_DEPLOY",
                "TASK_TYPE_MINT",
                "TASK_TYPE_MINT_BATCH",
                "TASK_TYPE_TRANSFER",
                "TASK_TYPE_TRANSFER_BATCH",
                "TASK_TYPE_BURN",
                "TASK_TYPE_BURN_BATCH",
                "TASK_TYPE_UPDATE_ADMIN",
                "TASK_TYPE_SPONSOR_BALANCE",
                "TASK_TYPE_SPONSOR_PRIVILEGE",
                "TASK_TYPE_UPDATE_TOKEN_URI"
            ]
        },
        "models.Transaction": {
            "type": "object",
            "properties": {
                "block_reason": {
                    "description": "没有发送到tx engine的原因，比如余额不足或网络错误等",
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.TransactionBlockReason"
                        }
                    ]
                },
                "chainId": {
                    "type": "integer"
                },
                "chainType": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "epochHeight": {
                    "type": "number"
                },
                "epoch_number": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "from": {
                    "type": "string"
                },
                "gas": {
                    "type": "number"
                },
                "gasCoveredBySponsor": {
                    "type": "boolean"
                },
                "gasFee": {
                    "type": "number"
                },
                "gasPrice": {
                    "type": "number"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "nonce": {
                    "type": "integer"
                },
                "pending_reason": {
                    "type": "string"
                },
                "pre_hashs": {
                    "type": "string"
                },
                "stage": {
                    "type": "integer"
                },
                "state": {
                    "$ref": "#/definitions/models.TxState"
                },
                "status": {
                    "type": "integer"
                },
                "storageCollateralized": {
                    "type": "number"
                },
                "storageCoveredBySponsor": {
                    "type": "boolean"
                },
                "storageLimit": {
                    "type": "number"
                },
                "taskType": {
                    "$ref": "#/definitions/models.TaskType"
                },
                "to": {
                    "type": "string"
                },
                "tryReceiptCnt": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "models.TransferTask": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "app_id": {
                    "type": "integer"
                },
                "block_reason": {
                    "description": "没有发送到tx engine的原因，比如余额不足或网络错误等",
                    "allOf": [
                        {
                            "$ref": "#/definitions/enums.TransactionBlockReason"
                        }
                    ]
                },
                "chain_id": {
                    "type": "integer"
                },
                "chain_type": {
                    "type": "integer"
                },
                "contract": {
                    "type": "string"
                },
                "contract_type": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "error": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "status": {
                    "description": "0-pending, 1-success, 2-failed",
                    "type": "integer"
                },
                "token_id": {
                    "type": "string"
                },
                "transfer_from": {
                    "type": "string"
                },
                "transfer_to": {
                    "type": "string"
                },
                "tx_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.TransferTaskQueryResult": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TransferTask"
                    }
                }
            }
        },
        "models.TxState": {
            "type": "integer",
            "enum": [
                -10,
                -9,
                -8,
                -7,
                -6,
                -5,
                -4,
                -3,
                -2,
                -1,
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-comments": {
                "TX_STATE_CONFIRMED": "4",
                "TX_STATE_EXECUTED": "3",
                "TX_STATE_EXECUTE_FAILED": "-2",
                "TX_STATE_INIT": "0",
                "TX_STATE_PENDING_RETRY": "-5",
                "TX_STATE_PENDING_RETRY_UPPER_GAS": "-6",
                "TX_STATE_PENDING_TX_EMPTY_RETRY": "-7",
                "TX_STATE_PENDING_WAIT": "-10; pending because of notEnoughCash or futureNonce",
                "TX_STATE_POPULATED": "1",
                "TX_STATE_READY_OR_INSERTED": "2",
                "TX_STATE_SEND_FAILED": "-1",
                "TX_STATE_SEND_FAILED_RETRY": "-3",
                "TX_STATE_SEND_FAILED_RETRY_UPPER_GAS": "-4",
                "_RESERVE_1": "-9",
                "_RESERVE_2": "-8"
            },
            "x-enum-varnames": [
                "TX_STATE_PENDING_WAIT",
                "_RESERVE_1",
                "_RESERVE_2",
                "TX_STATE_PENDING_TX_EMPTY_RETRY",
                "TX_STATE_PENDING_RETRY_UPPER_GAS",
                "TX_STATE_PENDING_RETRY",
                "TX_STATE_SEND_FAILED_RETRY_UPPER_GAS",
                "TX_STATE_SEND_FAILED_RETRY",
                "TX_STATE_EXECUTE_FAILED",
                "TX_STATE_SEND_FAILED",
                "TX_STATE_INIT",
                "TX_STATE_POPULATED",
                "TX_STATE_READY_OR_INSERTED",
                "TX_STATE_EXECUTED",
                "TX_STATE_CONFIRMED"
            ]
        },
        "multipart.FileHeader": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/textproto.MIMEHeader"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "rainbow_errors.RainbowErrorDetailInfo": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "routers.UpdateTokenUriReq": {
            "type": "object",
            "required": [
                "chain",
                "contract_type"
            ],
            "properties": {
                "chain": {
                    "type": "string",
                    "enum": [
                        "conflux",
                        "conflux_test"
                    ]
                },
                "contract_type": {
                    "type": "string",
                    "enum": [
                        "erc721",
                        "erc1155"
                    ]
                },
                "token_uri": {
                    "type": "string"
                }
            }
        },
        "services.AppBatchMintByMetaUriDto": {
            "type": "object",
            "required": [
                "chain",
                "contract_address",
                "mint_items"
            ],
            "properties": {
                "chain": {
                    "type": "string",
                    "enum": [
                        "conflux",
                        "conflux_test"
                    ]
                },
                "contract_address": {
                    "type": "string"
                },
                "mint_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.MintItemDto"
                    }
                }
            }
        },
        "services.AppMintByMetaPartsDto": {
            "type": "object",
            "required": [
                "chain",
                "file_url",
                "mint_to_address",
                "name"
            ],
            "properties": {
                "amount": {
                    "description": "amount on same token id, only erc1155 contract could set large than 1, others set null or 1",
                    "type": "integer"
                },
                "animation_url": {
                    "type": "string"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExposedMetadataAttribute"
                    }
                },
                "chain": {
                    "type": "string"
                },
                "contract_address": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "file_url": {
                    "type": "string"
                },
                "mint_to_address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "number": {
                    "description": "mint number, everyone with different token id (not conflict with AmountOnSameTokenID)",
                    "type": "integer"
                }
            }
        },
        "services.BurnBatchDto": {
            "type": "object",
            "required": [
                "chain",
                "contract_address",
                "contract_type",
                "items"
            ],
            "properties": {
                "chain": {
                    "type": "string",
                    "enum": [
                        "conflux",
                        "conflux_test"
                    ]
                },
                "contract_address": {
                    "type": "string"
                },
                "contract_type": {
                    "type": "string",
                    "enum": [
                        "erc721",
                        "erc1155"
                    ]
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.BurnItemDto"
                    }
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "services.BurnDto": {
            "type": "object",
            "required": [
                "chain",
                "contract_address",
                "contract_type",
                "token_id"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "chain": {
                    "type": "string",
                    "enum": [
                        "conflux",
                        "conflux_test"
                    ]
                },
                "contract_address": {
                    "type": "string"
                },
                "contract_type": {
                    "type": "string",
                    "enum": [
                        "erc721",
                        "erc1155"
                    ]
                },
                "token_id": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "services.BurnItemDto": {
            "type": "object",
            "required": [
                "token_id"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "token_id": {
                    "type": "string"
                }
            }
        },
        "services.ContractAdminUpdateDto": {
            "type": "object",
            "required": [
                "admin_address"
            ],
            "properties": {
                "admin_address": {
                    "description": "Chain           string `form:\"chain\" json:\"chain\" binding:\"required,oneof=conflux conflux_test\"`\nContractAddress string `form:\"contract_address\" json:\"contract_address\" binding:\"required\"`",
                    "type": "string"
                }
            }
        },
        "services.ContractDeployDto": {
            "type": "object",
            "required": [
                "chain",
                "name",
                "symbol",
                "type"
            ],
            "properties": {
                "auto_sponsor": {
                    "description": "default: true",
                    "type": "boolean"
                },
                "base_uri": {
                    "type": "string"
                },
                "chain": {
                    "type": "string",
                    "enum": [
                        "conflux",
                        "conflux_test"
                    ]
                },
                "is_sponsor_for_all_user": {
                    "description": "default: true",
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner_address": {
                    "type": "string"
                },
                "royalties_address": {
                    "type": "string"
                },
                "royalties_bps": {
                    "type": "integer"
                },
                "symbol": {
                    "type": "string"
                },
                "tokens_transferable_by_admin": {
                    "description": "default: true",
                    "type": "boolean"
                },
                "tokens_transferable_by_user": {
                    "description": "default: true",
                    "type": "boolean"
                },
                "transfer_cooldown_time": {
                    "description": "default: 0",
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "erc721",
                        "erc1155"
                    ]
                }
            }
        },
        "services.CustomMintBatchDto": {
            "type": "object",
            "required": [
                "chain",
                "contract_address",
                "mint_items"
            ],
            "properties": {
                "chain": {
                    "type": "string",
                    "enum": [
                        "conflux",
                        "conflux_test"
                    ]
                },
                "contract_address": {
                    "type": "string"
                },
                "mint_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.MintItemDto"
                    }
                }
            }
        },
        "services.CustomMintDto": {
            "type": "object",
            "required": [
                "chain",
                "contract_address",
                "mint_to_address"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "chain": {
                    "type": "string",
                    "enum": [
                        "conflux",
                        "conflux_test"
                    ]
                },
                "contract_address": {
                    "type": "string"
                },
                "metadata_uri": {
                    "type": "string"
                },
                "mint_to_address": {
                    "type": "string"
                },
                "token_id": {
                    "type": "string"
                }
            }
        },
        "services.EasyMintMetaPartsDto": {
            "type": "object",
            "required": [
                "chain",
                "file_url",
                "mint_to_address",
                "name"
            ],
            "properties": {
                "animation_url": {
                    "type": "string"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExposedMetadataAttribute"
                    }
                },
                "chain": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "file_url": {
                    "type": "string"
                },
                "mint_to_address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "services.InsertAccountReq": {
            "type": "object",
            "properties": {
                "create_if_exists": {
                    "type": "boolean"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "services.MetadataDto": {
            "type": "object",
            "required": [
                "description",
                "image",
                "name"
            ],
            "properties": {
                "animation_url": {
                    "type": "string"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ExposedMetadataAttribute"
                    }
                },
                "description": {
                    "type": "string"
                },
                "external_link": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "services.MintItemDto": {
            "type": "object",
            "required": [
                "mint_to_address"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "metadata_uri": {
                    "type": "string"
                },
                "mint_to_address": {
                    "type": "string"
                },
                "token_id": {
                    "type": "string"
                }
            }
        },
        "services.NFT": {
            "type": "object",
            "properties": {
                "contract_address": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "token_id": {
                    "type": "string"
                },
                "token_uri": {
                    "type": "string"
                }
            }
        },
        "services.SendTxResp": {
            "type": "object",
            "properties": {
                "tx_id": {
                    "type": "integer"
                }
            }
        },
        "services.SetSponsorResp": {
            "type": "object",
            "properties": {
                "sponsor_collateral_tx_id": {
                    "type": "integer"
                },
                "sponsor_gas_tx_id": {
                    "type": "integer"
                }
            }
        },
        "services.SponsorInfo": {
            "type": "object",
            "properties": {
                "collateral_sponsor": {
                    "type": "string"
                },
                "collateral_sponsor_balance": {
                    "type": "string"
                },
                "gas_sponsor": {
                    "type": "string"
                },
                "gas_sponsor_balance": {
                    "type": "string"
                },
                "gas_upper_bound": {
                    "type": "string"
                },
                "is_all_white_listed": {
                    "type": "boolean"
                }
            }
        },
        "services.TransferBatchDto": {
            "type": "object",
            "required": [
                "chain",
                "contract_address",
                "contract_type",
                "items"
            ],
            "properties": {
                "chain": {
                    "type": "string",
                    "enum": [
                        "conflux",
                        "conflux_test"
                    ]
                },
                "contract_address": {
                    "type": "string"
                },
                "contract_type": {
                    "type": "string",
                    "enum": [
                        "erc721",
                        "erc1155"
                    ]
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.TransferItemDto"
                    }
                }
            }
        },
        "services.TransferDto": {
            "type": "object",
            "required": [
                "chain",
                "contract_address",
                "contract_type",
                "token_id",
                "transfer_from_address",
                "transfer_to_address"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "chain": {
                    "type": "string",
                    "enum": [
                        "conflux",
                        "conflux_test"
                    ]
                },
                "contract_address": {
                    "type": "string"
                },
                "contract_type": {
                    "type": "string",
                    "enum": [
                        "erc721",
                        "erc1155"
                    ]
                },
                "token_id": {
                    "type": "string"
                },
                "transfer_from_address": {
                    "type": "string"
                },
                "transfer_to_address": {
                    "type": "string"
                }
            }
        },
        "services.TransferItemDto": {
            "type": "object",
            "required": [
                "token_id",
                "transfer_from_address",
                "transfer_to_address"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "token_id": {
                    "type": "string"
                },
                "transfer_from_address": {
                    "type": "string"
                },
                "transfer_to_address": {
                    "type": "string"
                }
            }
        },
        "services.TxResp": {
            "type": "object",
            "properties": {
                "error_msg": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "is_finalized": {
                    "type": "boolean"
                },
                "is_success": {
                    "type": "boolean"
                },
                "state_code": {
                    "$ref": "#/definitions/models.TxState"
                },
                "state_msg": {
                    "type": "string"
                }
            }
        },
        "services.UploadFilesResponse": {
            "type": "object",
            "properties": {
                "file_name": {
                    "type": "string"
                },
                "file_size": {
                    "type": "integer"
                },
                "file_type": {
                    "type": "string"
                },
                "file_url": {
                    "type": "string"
                }
            }
        },
        "services.UploadFolderResponse": {
            "type": "object",
            "properties": {
                "file_num": {
                    "type": "integer"
                },
                "folder_url": {
                    "type": "string"
                }
            }
        },
        "textproto.MIMEHeader": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        }
    }
}